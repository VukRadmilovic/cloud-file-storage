service: cloud-tim4

frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.9
  stage: dev
  region: eu-central-1
  memorySize: 128
  timeout: 10

resources:
  Resources:
    VukIdentity:
      Type: AWS::SES::EmailIdentity
      Properties:
        EmailIdentity: "2001vuk@gmail.com"
    MajaIdentity:
      Type: AWS::SES::EmailIdentity
      Properties:
        EmailIdentity: "maya.grudge.12@gmail.com"
    BestS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: najbolji-bucket-ikada
        AccessControl: PublicReadWrite
        OwnershipControls:
          Rules:
            - ObjectOwnership: ObjectWriter
        CorsConfiguration:
          CorsRules:
            - AllowedMethods:
                - "PUT"
                - "POST"
                - "GET"
                - "DELETE"
              AllowedOrigins:
                - "http://*"
                - "https://*"
                - "*"
              AllowedHeaders:
                - "*"
              ExposedHeaders:
                - "Access-Control-Allow-Origin"
        PublicAccessBlockConfiguration:
          BlockPublicPolicy: false
          BlockPublicAcls: false
          RestrictPublicBuckets: false
          IgnorePublicAcls: false
    BestDDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: s-metadata
        AttributeDefinitions:
          - AttributeName: partial_path
            AttributeType: S
        KeySchema:
          - AttributeName: partial_path
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    BestDDBSFamilyTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: family
        AttributeDefinitions:
          - AttributeName: parent
            AttributeType: S
        KeySchema:
          - AttributeName: parent
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    BestDDBSharedTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: shared
        AttributeDefinitions:
          - AttributeName: partial_path
            AttributeType: S
        KeySchema:
          - AttributeName: partial_path
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    BestUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: s-najbolji-user-pool-ikada
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
        Schema:
          - Name: preferred_username
            Mutable: true
            Required: true
          - Name: given_name
            Mutable: true
            Required: true
          - Name: family_name
            Mutable: true
            Required: true
          - Name: email
            Mutable: true
            Required: true
          - Name: birthdate
            Mutable: true
            Required: true
        VerificationMessageTemplate:
          DefaultEmailOption: "CONFIRM_WITH_CODE"
          EmailMessage: "Your verification code is {####}."
          EmailSubject: "Your verification code"
          SmsMessage: "Your verification code is {####}."
        UsernameConfiguration:
          CaseSensitive: false
        EmailConfiguration:
          EmailSendingAccount: "DEVELOPER"
          From: "Vuk <2001vuk@gmail.com>"
          ReplyToEmailAddress: "2001vuk@gmail.com"
          SourceArn: "arn:aws:ses:eu-central-1:547365780125:identity/2001vuk@gmail.com"
    BestUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:service}_${self:provider.stage}_client
        UserPoolId:
          Ref: BestUserPool
        GenerateSecret: false
        PreventUserExistenceErrors: "ENABLED"
        SupportedIdentityProviders:
          - "COGNITO"
        CallbackURLs:
          - "http://localhost:4200/main"   
        AllowedOAuthFlows:
          - "implicit"
        AllowedOAuthFlowsUserPoolClient: true
        AllowedOAuthScopes:
          - "email"
          - "openid"
    bestuserpooldomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        Domain: "team4-login"
        UserPoolId:
          Ref: BestUserPool

functions:
  generate-s3-url:
    handler: handler.generate_s3_url
    role: arn:aws:iam::547365780125:role/najbolja-lambda-rola-ikada
    events:
      - http:
          path: upload-link
          method: post
          integration: lambda
          cors: true
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt: 
                - BestUserPool
                - Arn
          response:
            statusCodes:
              200:
                pattern: ''
              400:
                pattern: 'Bad request: .*'
          request:
            passThrough: WHEN_NO_TEMPLATES
            template:
              application/json: |
                #set($inputRoot = $input.path('$'))
                {
                  #foreach($key in $inputRoot.keySet())
                    "$key": "$inputRoot.get($key)"
                    #if($foreach.hasNext),#end
                  #end,
                  "username": "$input.params('username')"
                }
            parameters:
              querystrings:
                username: true
      - http:
          path: upload-link
          method: options
          integration: mock
          cors: true
          response:
            statusCodes:
              200:
                pattern: ''
  get-user-data:
    handler: handler.get_user_data
    role: arn:aws:iam::547365780125:role/najbolja-lambda-rola-ikada
    events:
      - http:
          path: get-user-data
          method: get
          integration: lambda
          cors: true
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt: 
                - BestUserPool
                - Arn
          response:
            statusCodes:
              200:
                pattern: ''
          request:
            parameters:
              querystrings:
                album: true
                username: true
      - http:
          path: get-user-data
          method: options
          integration: mock
          cors: true
          response:
            statusCodes:
              200:
                pattern: ''
  get-user-shared-data:
    handler: handler.get_user_shared_data
    role: arn:aws:iam::547365780125:role/najbolja-lambda-rola-ikada
    events:
      - http:
          path: get-user-shared-data
          method: get
          integration: lambda
          cors: true
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt: 
                - BestUserPool
                - Arn
          response:
            statusCodes:
              200:
                pattern: ''
          request:
            parameters:
              querystrings:
                username: true
      - http:
          path: get-user-data
          method: options
          integration: mock
          cors: true
          response:
            statusCodes:
              200:
                pattern: ''

  get-file-details:
    handler: handler.get_file_metadata
    role: arn:aws:iam::547365780125:role/najbolja-lambda-rola-ikada
    events:
      - http:
          path: get-file-details
          method: get
          integration: lambda
          cors: true
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt: 
                - BestUserPool
                - Arn
          response:
            statusCodes:
              200:
                pattern: ''
              400:
                pattern: 'Bad request: .*'
              404:
                pattern: 'Not found: .*'
          request:
            parameters:
              querystrings:
                file_path: true
                username: true
      - http:
          path: get-file-details
          method: options
          integration: mock
          cors: true
          response:
            statusCodes:
              200:
                pattern: ''
  s3-trigger:
    handler: handler.s3_trigger
    role: arn:aws:iam::547365780125:role/najbolja-lambda-rola-ikada
    events:
      - s3:
          bucket: najbolji-bucket-ikada
          event: s3:ObjectCreated:*
          existing: true
  modify-metadata:
    handler: handler.modify_metadata
    role: arn:aws:iam::547365780125:role/najbolja-lambda-rola-ikada
    events:
      - http:
          path: modify-metadata
          method: put
          integration: lambda
          cors: true
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt: 
                - BestUserPool
                - Arn
          response:
            statusCodes:
              200:
                pattern: ''
              400:
                pattern: 'Bad request: .*'
              404:
                pattern: 'Not found: .*'
          request:
            passThrough: WHEN_NO_TEMPLATES
            template:
              application/json: |
                #set($inputRoot = $input.path('$'))
                {
                  #foreach($key in $inputRoot.keySet())
                    "$key": "$inputRoot.get($key)"
                    #if($foreach.hasNext),#end
                  #end,
                  "username": "$input.params('username')"
                }
            parameters:
              querystrings:
                username: true
      - http:
          path: modify-metadata
          method: options
          integration: mock
          cors: true
          response:
            statusCodes:
              200:
                pattern: ''
  full-modify:
    handler: handler.full_modify_item
    role: arn:aws:iam::547365780125:role/najbolja-lambda-rola-ikada
    events:
      - http:
          path: modify-full
          method: put
          integration: lambda
          cors: true
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt: 
                - BestUserPool
                - Arn
          response:
            statusCodes:
              200:
                pattern: ''
              400:
                pattern: 'Bad request: .*'
              404:
                pattern: 'Not found: .*'
          request:
            passThrough: WHEN_NO_TEMPLATES
            template:
              application/json: |
                #set($inputRoot = $input.path('$'))
                {
                  #foreach($key in $inputRoot.keySet())
                    "$key": "$inputRoot.get($key)"
                    #if($foreach.hasNext),#end
                  #end,
                  "username": "$input.params('username')"
                }
            parameters:
              querystrings:
                username: true
      - http:
          path: modify-full
          method: options
          integration: mock
          cors: true
          response:
            statusCodes:
              200:
                pattern: ''
  delete-item:
    handler: handler.delete_item
    role: arn:aws:iam::547365780125:role/najbolja-lambda-rola-ikada
    events:
      - http:
          path: delete-item
          method: delete
          integration: lambda
          cors: true
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt: 
                - BestUserPool
                - Arn
          response:
            statusCodes:
              200:
                pattern: ''
              400:
                pattern: 'Bad request: .*'
              404:
                pattern: 'Not found: .*'
          request:
            parameters:
              querystrings:
                file_path: true
                username: true
      - http:
          path: delete-item
          method: options
          integration: mock
          cors: true
          response:
            statusCodes:
              200:
                pattern: ''
  family-album-function:
    handler: handler.family_album_function
    role: arn:aws:iam::547365780125:role/najbolja-lambda-rola-ikada
    events:
      - http:
          path: family-album
          method: post
          integration: lambda
          cors: true
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt: 
                - BestUserPool
                - Arn
          response:
            statusCodes:
              200:
                pattern: ''
              400:
                pattern: 'Bad request: .*'
              404:
                pattern: 'Not found: .*'
          request:
            parameters:
              querystrings:
                user: true
                family: true
      - http:
          path: family-album
          method: options
          integration: mock
          cors: true
          response:
            statusCodes:
              200:
                pattern: ''
  stop-share-album-function:
    handler: handler.stop_share_album_function
    role: arn:aws:iam::547365780125:role/najbolja-lambda-rola-ikada
    events:
      - http:
          path: stop-share-album
          method: delete
          integration: lambda
          cors: true
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt: 
                - BestUserPool
                - Arn
          response:
            statusCodes:
              200:
                pattern: ''
              400:
                pattern: 'Bad request: .*'
              404:
                pattern: 'Not found: .*'
          request:
            parameters:
              querystrings:
                file_path: true
                sharedFrom: true
                sharedTo: true
      - http:
          path: stop-share-album
          method: options
          integration: mock
          cors: true
          response:
            statusCodes:
              200:
                pattern: ''

  share-album-function:
    handler: handler.share_album_function
    role: arn:aws:iam::547365780125:role/najbolja-lambda-rola-ikada
    events:
      - http:
          path: share-album
          method: post
          integration: lambda
          cors: true
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt: 
                - BestUserPool
                - Arn
          response:
            statusCodes:
              200:
                pattern: ''
              400:
                pattern: 'Bad request: .*'
              404:
                pattern: 'Not found: .*'
          request:
            parameters:
              querystrings:
                file_path: true
                sharedFrom: true
                sharedTo: true
      - http:
          path: share-album
          method: options
          integration: mock
          cors: true
          response:
            statusCodes:
              200:
                pattern: ''
  cognito-signup-function:
    handler: handler.add_user_trigger
    role: arn:aws:iam::547365780125:role/najbolja-lambda-rola-ikada
    events:
      - cognitoUserPool:
          pool: 's-najbolji-user-pool-ikada'
          trigger: PostConfirmation
          existing: true
  download-file:
    handler: handler.download_file
    role: arn:aws:iam::547365780125:role/najbolja-lambda-rola-ikada
    events:
        - http:
            path: download-file
            method: get
            integration: lambda
            cors: true
            authorizer:
              name: CognitoAuthorizer
              type: COGNITO_USER_POOLS
              arn:
                Fn::GetAtt: 
                  - BestUserPool
                  - Arn
            response:
              statusCodes:
                200:
                  pattern: ''
                400:
                  pattern: 'Bad request: .*'
                404:
                  pattern: 'Not found: .*'
            request:
              parameters:
                querystrings:
                  username: true
                  file_path: true
        - http:
            path: download-file
            method: options
            integration: mock
            cors: true
            response:
              statusCodes:
                200:
                  pattern: ''
  create-album:
      handler: handler.create_album
      role: arn:aws:iam::547365780125:role/najbolja-lambda-rola-ikada
      events:
          - http:
              path: create-album
              method: get
              integration: lambda
              cors: true
              authorizer:
                name: CognitoAuthorizer
                type: COGNITO_USER_POOLS
                arn:
                  Fn::GetAtt: 
                    - BestUserPool
                    - Arn
              response:
                statusCodes:
                  200:
                    pattern: ''
                  400:
                    pattern: 'Bad request: .*'
                  404:
                    pattern: 'Not found: .*'
              request:
                parameters:
                  querystrings:
                    username: true
                    file_path: true
          - http:
              path: create-album
              method: options
              integration: mock
              cors: true
              response:
                statusCodes:
                  200:
                    pattern: ''
  delete-album:
      handler: handler.delete_album
      role: arn:aws:iam::547365780125:role/najbolja-lambda-rola-ikada
      events:
          - http:
              path: delete-album
              method: delete
              integration: lambda
              cors: true
              authorizer:
                name: CognitoAuthorizer
                type: COGNITO_USER_POOLS
                arn:
                  Fn::GetAtt: 
                    - BestUserPool
                    - Arn
              response:
                statusCodes:
                  200:
                    pattern: ''
                  400:
                    pattern: 'Bad request: .*'
                  404:
                    pattern: 'Not found: .*'
              request:
                parameters:
                  querystrings:
                    username: true
                    file_path: true
          - http:
              path: delete-album
              method: options
              integration: mock
              cors: true
              response:
                statusCodes:
                  200:
                    pattern: ''
  copy-file:
      handler: handler.copy_file
      role: arn:aws:iam::547365780125:role/najbolja-lambda-rola-ikada
      events:
          - http:
              path: copy-file
              method: put
              integration: lambda
              cors: true
              authorizer:
                name: CognitoAuthorizer
                type: COGNITO_USER_POOLS
                arn:
                  Fn::GetAtt: 
                    - BestUserPool
                    - Arn
              response:
                statusCodes:
                  200:
                    pattern: ''
                  400:
                    pattern: 'Bad request: .*'
                  404:
                    pattern: 'Not found: .*'
              request:
                parameters:
                  querystrings:
                    username: true
                    source_path: true
                    destination_path: true
          - http:
              path: copy-file
              method: options
              integration: mock
              cors: true
              response:
                statusCodes:
                  200:
                    pattern: ''
  move-file:
      handler: handler.move_file
      role: arn:aws:iam::547365780125:role/najbolja-lambda-rola-ikada
      events:
          - http:
              path: move-file
              method: put
              integration: lambda
              cors: true
              authorizer:
                name: CognitoAuthorizer
                type: COGNITO_USER_POOLS
                arn:
                  Fn::GetAtt: 
                    - BestUserPool
                    - Arn
              response:
                statusCodes:
                  200:
                    pattern: ''
                  400:
                    pattern: 'Bad request: .*'
                  404:
                    pattern: 'Not found: .*'
              request:
                parameters:
                  querystrings:
                    username: true
                    source_path: true
                    destination_path: true
          - http:
              path: move-file
              method: options
              integration: mock
              cors: true
              response:
                statusCodes:
                  200:
                    pattern: ''